pragma solidity ^0.8.2;

contract amazotoken {
mapping(address => uint) public balances;
mapping (address => ampping(address => uint)) public allowance;
uint public totalsupply = 90000000 * 10 *18;
string public name = " AmazoToken";
string public symbol = "ATN"
uint public decimals = 18;

event Transfer(address indexed from , address indexed to,uint value);
event Approval(address indexed owner, address indexed spender , uint value);

constructor() {
  balance[msg.sender] = totalsupply;
 }
 
 function balanceOf(address owner) public view returns(uint) {
 return balances[owner];
 }
 
 function transfer(address to, uint value) public returns(bool) {
  require(balanceOf(msg.sender) >= value, 'balance too low');
  balances[to] += value;
  balances[msg.sender] -= value;
  emait Transfer(msg.sender, to, value);
  return true;
}
}
 
function transferFrom(address from, address to, uint value) public return(bool) {
  require(balanceOf(from) >= value, 'balance too low');
  require(allowoance[from][msg.sender] >= value, 'allowance too low');
  balance[to] += value;
  balances[from] -= value;
  emit Trasfer(from, to, value);
  return true;
  }
  function approve(address spender , uint value)) public return(bool) {
  allowance[msg.sender, spender, value);
  return true;
  }
  }
  
